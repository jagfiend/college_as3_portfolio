package classes.app // this class controls the shell menu structure and calls the game class when required... as well as load the sounds and lso...{	// import libraries and classes...	import flash.display.MovieClip;	import flash.events.Event;	import flash.ui.Mouse;	import flash.net.SharedObject;	import classes.menus.MenuCursor;	import classes.menus.MenuBackground;	import classes.menus.MainMenu;	import classes.menus.Instructions;	import classes.menus.HighScores;	import classes.menus.GameOver;	import classes.game.Game;	import classes.sound.SoundManager;	// class code...	public class App extends MovieClip	{		// class variables...		private var _menuCursor:MenuCursor;		private var _menuBackground:MenuBackground;		private var _mainMenu:MainMenu;		private var _game:Game;		private var _instructions:Instructions;		private var _highScores:HighScores;		private var _gameOver:GameOver;		// for score keeping...		public var _lso:SharedObject;		public var _scoresArray:Array = new Array;		// for managing sound...		private var _soundManager:SoundManager = SoundManager.getInstance();		// class functions...		public function App() 		{			addEventListener(Event.ADDED_TO_STAGE, onAdded);			addEventListener(Event.REMOVED_FROM_STAGE, onRemove);		}				private function onAdded(e:Event):void 		{			removeEventListener(Event.ADDED_TO_STAGE, onAdded);			Mouse.hide(); // hides the basic cursor...			loadData(); // loads lso data...			loadSoundLibrary(); // loads sound library...			drawMenuBackground(); // draws background from library graphic...			drawMainMenu(); // draws menu graphic, combination of library image and code created buttons...			playMenuMusic(); // calls function to start menu music...		}				private function onRemove(e:Event):void		{			// functions listens for removal of app...which never really happens, but kills listeners and restores standard cursor 			removeEventListener(Event.REMOVED_FROM_STAGE, onRemove);			Mouse.show();		}		private function loadSoundLibrary():void		{			// loads sounds into app from the library...			SoundManager.getInstance().addLibrarySound(click,"click");			SoundManager.getInstance().addLibrarySound(colonyExplosion,"colonyExplosion");			SoundManager.getInstance().addLibrarySound(darkMatter,"darkMatter");			SoundManager.getInstance().addLibrarySound(gameMusic,"gameMusic");			SoundManager.getInstance().addLibrarySound(menuMusic,"menuMusic");			SoundManager.getInstance().addLibrarySound(missileExplosion,"missileExplosion");			SoundManager.getInstance().addLibrarySound(newWave,"newWave");			SoundManager.getInstance().addLibrarySound(target,"target");			// these sounds are now available to be called by the sound manager playSound function from anywhere in the application...		}		public function playMenuMusic():void		{ // playSound function sets volume at 0.8 and calls 6 loops of the music just in case the user needs 30 minutes on the menus...			_soundManager.playSound("menuMusic",0.8,0,6); 		}		public function drawMenuCursor():void		{			// add custom menu cursor...			_menuCursor = new MenuCursor(this);			addChild(_menuCursor);		}				public function removeMenuCursor():void		{			// remove custom cursor...			removeChild(_menuCursor);			_menuCursor = null;		}		 		public function drawMenuBackground():void		{			// add static background image...			_menuBackground = new MenuBackground(this,0,0);			addChild(_menuBackground);		}		 		public function drawMainMenu():void		{			// clear any other instances that might clutter the screen...			killTheKids();			// create main menu...			_mainMenu = new MainMenu(this,50,150);			addChild(_mainMenu);			// create cursor (called here to draw cursor over the top of the buttons...)			drawMenuCursor();		}				public function killTheKids():void		{			// function clears the stage...			// remove previous menu cursors...			if(_menuCursor){				removeMenuCursor();			}			// clear submenus or game screens if appropriate...			if(_mainMenu){				// if main menu...				removeChild(_mainMenu);				_mainMenu = null;			} else if(_instructions){ 				// if instructions...				removeChild(_instructions);				_instructions = null;			} else if(_highScores){ 				// if high scores...				removeChild(_highScores);				_highScores = null;			} else if(_game){ 				// if gameplay screens...				removeChild(_game);				_game = null;			} else if(_gameOver){ 				// if game over...				removeChild(_gameOver);				_gameOver = null;			}		}				/* FUNCTIONS CALLED BY MENU BUTTONS */		public function startGame():void		{			// clear any other instances that might clutter the screen...			killTheKids();			// remove background and menus...			if(_menuBackground){				removeChild(_menuBackground);				_menuBackground = null;			}			// stop menu music...			_soundManager.stopSound("menuMusic");			// create game instance...			_game = new Game(this);			addChild(_game);		}				public function drawInstructions():void		{			// removes instances...			killTheKids();			// creates instructions screen...			_instructions = new Instructions(this,50,150);			addChild(_instructions);			drawMenuCursor();		} 				public function drawScores():void		{			// removes instances...			killTheKids();			// creates high scores screen...			_highScores = new HighScores(this,50,150);			addChild(_highScores);			drawMenuCursor();		} 				public function drawGameOver(score:String):void		{			// remove instances...			killTheKids();			// start menu music again...			playMenuMusic();			// draws game over screen...			_gameOver = new GameOver(this,50,150,score);			addChild(_gameOver);			// draw menu cursor...			drawMenuCursor();		}				/* SCORE RECORDING AND LSO FUNCTIONS */		public function addEntry(user:String,score:String):void		{			// variable to create an associative array object...			var playerEntry:Object = {};			// take the name text..			playerEntry.user = user;			// take the score text..			playerEntry.score = score;			// push into array...			_scoresArray.push(playerEntry);			// sort the array by highest score, descending...			_scoresArray.sort(arraySort,Array.DESCENDING);			// trim the array down to keep it to ten entries...			_scoresArray.pop();			// save into lso...			saveData();			// move to updated high score table view...			killTheKids();			drawScores();		}		public function loadData():void		{			// call local saved shared object...			_lso = SharedObject.getLocal("dm_highscores");			if(_lso.data.scores){				// loads locally saved scores if applicable...				_scoresArray = _lso.data.scores;			} else {				// default values associative array...				_scoresArray = [{user:"PWONDISACE",score:1000000},								{user:"PWONDISACE",score:900000},								{user:"PWONDISACE",score:800000},								{user:"PWONDISACE",score:700000},								{user:"PWONDISACE",score:600000},								{user:"PWONDISACE",score:500000},								{user:"PWONDISACE",score:400000},								{user:"PWONDISACE",score:300000},								{user:"PWONDISACE",score:200000},								{user:"PWONDISACE",score:100000}];			}		}				public function saveData():void		{			// saves array into lso...			_lso.data.scores = _scoresArray;			_lso.flush();		}				private function arraySort(objA:Object,objB:Object):int		{			// runs through array and sorts entries by score value...	    	if (objA.score < objB.score){	        	return -1;    		} else if (objA.score > objB.score){				return 1;	   		} else {	        	return 0;	    	}		} // end of functions	} // end of class} // end of package
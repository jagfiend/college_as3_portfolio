package classes.sound // this class controls the sound for the application in the manner of a singleton class{    import flash.events.Event;    import flash.media.Sound;    import flash.media.SoundChannel;    import flash.media.SoundLoaderContext;    import flash.media.SoundTransform;    import flash.net.URLRequest;    import flash.utils.Dictionary;    import flash.utils.getQualifiedClassName;    /**     * The SoundManager is a singleton that allows you to have various ways to control sounds in your project.     *      * The SoundManager can load external or library sounds, pause/mute/stop/control volume for one or more sounds at a time.     *      */    public class SoundManager    {        // singleton instance        private static var _instance:SoundManager;        private static var _allowInstance:Boolean;        private var _soundsDict:Dictionary;        private var _sounds:Array;        private var callBackFun:Function;        // singleton instance of SoundManager        public static function getInstance():SoundManager        {            if (SoundManager._instance == null)            {                SoundManager._allowInstance = true;                SoundManager._instance = new SoundManager();                SoundManager._allowInstance = false;            }            return SoundManager._instance;        }        public function SoundManager()        {            this._soundsDict = new Dictionary(true);            this._sounds = new Array();            if (!SoundManager._allowInstance)            {                throw new Error("Error: Use SoundManager.getInstance() instead of the new keyword.");            }        }        /**         * Adds a sound from the library to the sounds dictionary for playing in the future.         *         * @param linkageID The class name of the library symbol that was exported for AS         * @param soundName The string identifier of the sound to be used when calling other methods on the sound         *         * @return Boolean A boolean value representing if the sound was added successfully         */        public function addLibrarySound(linkageID:*, soundName:String):Boolean        {            for (var i:int = 0; i <this._sounds.length; i++)            {                if (this._sounds[i].name == soundName) return false;            }            var sndObj:Object = new Object();            var snd:Sound = new linkageID;            sndObj.name = soundName;            sndObj.sound = snd;            sndObj.channel = new SoundChannel();            sndObj.position = 0;            sndObj.paused = false;            sndObj.volume = 1;            sndObj.startTime = 0;            sndObj.loops = 0;            sndObj.pausedByAll = false;            this._soundsDict[soundName] = sndObj;            this._sounds.push(sndObj);            return true;        }        /**         * Adds an external sound to the sounds dictionary for playing in the future.         *         * @param path A string representing the path where the sound is on the server         * @param soundName The string identifier of the sound to be used when calling other methods on the sound         * @param buffer The number, in milliseconds, to buffer the sound before you can play it (default: 1000)         * @param checkPolicyFile A boolean that determines whether Flash Player should try to download a cross-domain policy file from the loaded sound's server before beginning to load the sound (default: false)         *         * @return Boolean A boolean value representing if the sound was added successfully         */        public function addExternalSound(path:String, soundName:String, buffer:Number = 1000, checkPolicyFile:Boolean = false):Boolean        {            for (var i:int = 0; i <this._sounds.length; i++)            {                if (this._sounds[i].name == soundName) return false;            }            var sndObj:Object = new Object();            var snd:Sound = new Sound(new URLRequest(path), new SoundLoaderContext(buffer, checkPolicyFile));            sndObj.name = soundName;            sndObj.sound = snd;            sndObj.channel = new SoundChannel();            sndObj.position = 0;            sndObj.paused = true;            sndObj.volume = 1;            sndObj.startTime = 0;            sndObj.loops = 0;            sndObj.pausedByAll = false;            this._soundsDict[soundName] = sndObj;            this._sounds.push(sndObj);            return true;        }        /**         * Removes a sound from the sound dictionary.  After calling this, the sound will not be available until it is re-added.         *         * @param soundName The string identifier of the sound to remove         *         * @return void         */        public function removeSound(soundName:String):void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                if (this._sounds[i].name == soundName)                {                    this._sounds[i] = null;                    this._sounds.splice(i, 1);                }            }            delete this._soundsDict[soundName];        }        /**         * Removes all sounds from the sound dictionary.         *         * @return void         */        public function removeAllSounds():void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                this._sounds[i] = null;            }            this._sounds = new Array();            this._soundsDict = new Dictionary(true);        }        /**         * Plays or resumes a sound from the sound dictionary with the specified name.         *         * @param soundName The string identifier of the sound to play         * @param soundVolume A number from 0 to 1 representing the volume at which to play the sound (default: 1)         * @param startTime A number (in milliseconds) representing the time to start playing the sound at (default: 0)         * @param numLoops An integer representing the number of times to loop the sound (default: 0)         *         * @return void         */        public function playSound(soundName:String, soundVolume:Number = 1, startTime:Number = 0, numLoops:int = 0, callBackFun:Function = null):SoundChannel        {            this.callBackFun = callBackFun;            var snd:Object = this._soundsDict[soundName];            snd.volume = soundVolume;            snd.startTime = startTime;            snd.loops = numLoops;            if (snd.paused)            {                snd.channel = snd.sound.play(snd.position, snd.loops, new SoundTransform(snd.volume));            }            else            {                snd.channel = snd.sound.play(startTime, snd.loops, new SoundTransform(snd.volume));            }            if (callBackFun != null)                snd.channel.addEventListener(Event.SOUND_COMPLETE, onSoundCompleteEvent);            snd.paused = false;            return snd.channel;        }        private function onSoundCompleteEvent(e:Event):void         {            callBackFun.call();        }        /**         * Stops the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return void         */        public function stopSound(soundName:String):void        {            var snd:Object = this._soundsDict[soundName];            snd.paused = true;            snd.channel.stop();            snd.position = snd.channel.position;        }        /**         * Pauses the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return void         */        public function pauseSound(soundName:String):void        {            var snd:Object = this._soundsDict[soundName];            snd.paused = true;            snd.position = snd.channel.position;            snd.channel.stop();        }        /**         * Plays all the sounds that are in the sound dictionary.         *         * @param useCurrentlyPlayingOnly A boolean that only plays the sounds which were currently playing before a pauseAllSounds() or stopAllSounds() call (default: false)         *         * @return void         */         // not so sure this works JK...!!!        public function playAllSounds(useCurrentlyPlayingOnly:Boolean = false):void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                var id:String = this._sounds[i].name;                if (useCurrentlyPlayingOnly)                {                    if (this._soundsDict[id].pausedByAll)                    {                        this._soundsDict[id].pausedByAll = false;                        this.playSound(id);                    }                }                else                {                    this.playSound(id);                }            }        }        /**         * Stops all the sounds that are in the sound dictionary.         *         * @param useCurrentlyPlayingOnly A boolean that only stops the sounds which are currently playing (default: true)         *         * @return void         */        public function stopAllSounds(useCurrentlyPlayingOnly:Boolean = true):void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                var id:String = this._sounds[i].name;                if (useCurrentlyPlayingOnly)                {                    if (!this._soundsDict[id].paused)                    {                        this._soundsDict[id].pausedByAll = true;                        this.stopSound(id);                    }                }                else                {                    this.stopSound(id);                }            }        }        /**         * Pauses all the sounds that are in the sound dictionary.         *         * @param useCurrentlyPlayingOnly A boolean that only pauses the sounds which are currently playing (default: true)         *         * @return void         */        public function pauseAllSounds(useCurrentlyPlayingOnly:Boolean = true):void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                var id:String = this._sounds[i].name;                if (useCurrentlyPlayingOnly)                {                    if (!this._soundsDict[id].paused)                    {                        this._soundsDict[id].pausedByAll = true;                        this.pauseSound(id);                    }                }                else                {                    this.pauseSound(id);                }            }        }        /**         * Mutes the volume for all sounds in the sound dictionary.         *         * @return void         */        public function muteAllSounds():void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                var id:String = this._sounds[i].name;                this.setSoundVolume(id, 0);            }        }        /**         * Resets the volume to their original setting for all sounds in the sound dictionary.         *         * @return void         */        public function unmuteAllSounds():void        {            for (var i:int = 0; i <this._sounds.length; i++)            {                var id:String = this._sounds[i].name;                var snd:Object = this._soundsDict[id];                var curTransform:SoundTransform = snd.channel.soundTransform;                curTransform.volume = snd.volume;                snd.channel.soundTransform = curTransform;            }        }        /**         * Sets the volume of the specified sound.         *         * @param soundName The string identifier of the sound         * @param soundVolume The volume, between 0 and 1, to set the sound to         *         * @return void         */        public function setSoundVolume(soundName:String, soundVolume:Number):void        {            var snd:Object = this._soundsDict[soundName];            var curTransform:SoundTransform = snd.channel.soundTransform;            curTransform.volume = soundVolume;            snd.channel.soundTransform = curTransform;        }        /**         * Gets the volume of the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return Number The current volume of the sound         */        public function getSoundVolume(soundName:String):Number        {            return this._soundsDict[soundName].channel.soundTransform.volume;        }        /**         * Gets the position of the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return Number The current position of the sound, in milliseconds         */        public function getSoundPosition(soundName:String):Number        {            return this._soundsDict[soundName].channel.position;        }        /**         * Gets the duration of the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return Number The length of the sound, in milliseconds         */        public function getSoundDuration(soundName:String):Number        {            return this._soundsDict[soundName].sound.length;        }        /**         * Gets the sound object of the specified sound.         *         * @param soundName The string identifier of the sound         *         * @return Sound The sound object         */        public function getSoundObject(soundName:String):Sound        {            return this._soundsDict[soundName].sound;        }        /**         * Identifies if the sound is paused or not.         *         * @param soundName The string identifier of the sound         *         * @return Boolean The boolean value of paused or not paused         */        public function isSoundPaused(soundName:String):Boolean        {            return this._soundsDict[soundName].paused;        }        /**         * Identifies if the sound was paused or stopped by calling the stopAllSounds() or pauseAllSounds() methods.         *         * @param soundName The string identifier of the sound         *         * @return Number The boolean value of pausedByAll or not pausedByAll         */        public function isSoundPausedByAll(soundName:String):Boolean        {            return this._soundsDict[soundName].pausedByAll;        }		public function get sounds():Array        {            return this._sounds;        }        public function toString():String        {            return getQualifiedClassName(this);        }    } // End of class}// End of package